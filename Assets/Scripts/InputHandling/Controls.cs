//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputHandling/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""2DGraphZoom"",
            ""id"": ""f5eb23fd-99c8-4331-a558-f82d7e51e8cd"",
            ""actions"": [
                {
                    ""name"": ""ScrollZoom"",
                    ""type"": ""Value"",
                    ""id"": ""64b52149-aff5-4598-bd15-f4b80296c183"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetZoomCenter"",
                    ""type"": ""Button"",
                    ""id"": ""236f8e93-5dba-4b39-81d8-6c82b8e9b9d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2343d1b-99b3-45ff-8666-fcb952661497"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": ""Computer"",
                    ""action"": ""SetZoomCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbf671ab-adc7-40fe-9e1a-96605b1111e2"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""ScrollZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Computer"",
            ""bindingGroup"": ""Computer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // 2DGraphZoom
        m__2DGraphZoom = asset.FindActionMap("2DGraphZoom", throwIfNotFound: true);
        m__2DGraphZoom_ScrollZoom = m__2DGraphZoom.FindAction("ScrollZoom", throwIfNotFound: true);
        m__2DGraphZoom_SetZoomCenter = m__2DGraphZoom.FindAction("SetZoomCenter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 2DGraphZoom
    private readonly InputActionMap m__2DGraphZoom;
    private List<I_2DGraphZoomActions> m__2DGraphZoomActionsCallbackInterfaces = new List<I_2DGraphZoomActions>();
    private readonly InputAction m__2DGraphZoom_ScrollZoom;
    private readonly InputAction m__2DGraphZoom_SetZoomCenter;
    public struct _2DGraphZoomActions
    {
        private @Controls m_Wrapper;
        public _2DGraphZoomActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScrollZoom => m_Wrapper.m__2DGraphZoom_ScrollZoom;
        public InputAction @SetZoomCenter => m_Wrapper.m__2DGraphZoom_SetZoomCenter;
        public InputActionMap Get() { return m_Wrapper.m__2DGraphZoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_2DGraphZoomActions set) { return set.Get(); }
        public void AddCallbacks(I_2DGraphZoomActions instance)
        {
            if (instance == null || m_Wrapper.m__2DGraphZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2DGraphZoomActionsCallbackInterfaces.Add(instance);
            @ScrollZoom.started += instance.OnScrollZoom;
            @ScrollZoom.performed += instance.OnScrollZoom;
            @ScrollZoom.canceled += instance.OnScrollZoom;
            @SetZoomCenter.started += instance.OnSetZoomCenter;
            @SetZoomCenter.performed += instance.OnSetZoomCenter;
            @SetZoomCenter.canceled += instance.OnSetZoomCenter;
        }

        private void UnregisterCallbacks(I_2DGraphZoomActions instance)
        {
            @ScrollZoom.started -= instance.OnScrollZoom;
            @ScrollZoom.performed -= instance.OnScrollZoom;
            @ScrollZoom.canceled -= instance.OnScrollZoom;
            @SetZoomCenter.started -= instance.OnSetZoomCenter;
            @SetZoomCenter.performed -= instance.OnSetZoomCenter;
            @SetZoomCenter.canceled -= instance.OnSetZoomCenter;
        }

        public void RemoveCallbacks(I_2DGraphZoomActions instance)
        {
            if (m_Wrapper.m__2DGraphZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_2DGraphZoomActions instance)
        {
            foreach (var item in m_Wrapper.m__2DGraphZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2DGraphZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _2DGraphZoomActions @_2DGraphZoom => new _2DGraphZoomActions(this);
    private int m_ComputerSchemeIndex = -1;
    public InputControlScheme ComputerScheme
    {
        get
        {
            if (m_ComputerSchemeIndex == -1) m_ComputerSchemeIndex = asset.FindControlSchemeIndex("Computer");
            return asset.controlSchemes[m_ComputerSchemeIndex];
        }
    }
    public interface I_2DGraphZoomActions
    {
        void OnScrollZoom(InputAction.CallbackContext context);
        void OnSetZoomCenter(InputAction.CallbackContext context);
    }
}
